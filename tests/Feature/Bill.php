<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class Bill extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed');
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testBillWithItemsDone()
    {
        $endPoint = 'api/products/buyItems';
        $params = [
            "items" => [
                [
                    "id" => 1,
                    "count" => 2
                ],
                [
                    "id" => 4,
                    "count" => 1
                ],
                [
                    "id" => 3,
                    "count" => 1
                ]
            ]
        ];
        $user = User::factory()->create(['type' => 'merchant']);
        $response = $this->callApi($endPoint, $params, $user->email);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "products" => [
                "items" => [
                    [
                        "name",
                        "total_price",
                        "count"
                    ],
                ],
                "Subtotal",
                "Taxes",
                "discount",
                "total"
            ]
        ]);
    }

    public function testBillWithoutNoItems()
    {
        $endPoint = 'api/products/buyItems';
        $params = [];

        $user = User::factory()->create(['type' => 'merchant']);
        $response = $this->callApi($endPoint, $params, $user->email);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "error"]);
    }

    public function testBillWithItemDoesntExist()
    {
        $endPoint = 'api/products/buyItems';
        $params = [
            "items" => [
                [
                    "id" => 5,
                    "count" => 1
                ]
            ]
        ];

        $user = User::factory()->create(['type' => 'merchant']);
        $response = $this->callApi($endPoint, $params, $user->email);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "error"]);
    }

    public function testObjectJsonHasErrorStructure()
    {
        $endPoint = 'api/products/buyItems';
        $params = [
            "items" => [
                "id" => 5,
                "count" => 1
            ]
        ];

        $user = User::factory()->create(['type' => 'merchant']);
        $response = $this->callApi($endPoint, $params, $user->email);

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "error"]);
    }

    /**
     * Simulate call api
     *
     * @param  string $endpoint
     * @param  array  $params
     * @param  string $userMail
     *
     * @return mixed
     */
    protected function callApi($endpoint, $params = [], $userMail)
    {
        $headers = [];

        if (!is_null($userMail)) {
            $token = auth()->guard('api')
                ->login(User::whereEmail($userMail)->first());
            $headers['Authorization'] = 'Bearer ' . $token;
        }
        return $this->postJson(
             $endpoint,
            $params,
            $headers
        );
    }
}
