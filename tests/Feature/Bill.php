<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class Bill extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed');
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testBillWithItemsDone()
    {
        $response = $this
            ->postJson('/api/products/buyItems', [
                    "items" => [
                        [
                            "id" => 1,
                            "count" => 2
                        ],
                        [
                            "id" => 4,
                            "count" => 1
                        ],
                        [
                            "id" => 3,
                            "count" => 1
                        ]
                    ]
                ]
            );

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "products" => [
                "items" => [
                    [
                        "name",
                        "total_price",
                        "count"
                    ],
                ],
                "Subtotal",
                "Taxes",
                "discount",
                "total"
            ]
        ]);
    }

    public function testBillWithoutNoItems()
    {
        $response = $this
            ->postJson('/api/products/buyItems', [
                    "items" => [
                    ]
                ]
            );

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "error"]);
    }

    public function testBillWithItemsDoesntExist()
    {
        $response = $this
            ->postJson('/api/products/buyItems', [
                    "items" => [
                        [
                            "id" => 5,
                            "count" => 1
                        ]
                    ]
                ]
            );

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "error"]);
    }

    public function testObjectJsonHasErrorStructure()
    {
        $response = $this
            ->postJson('/api/products/buyItems', [
                    "items" => [
                            "id" => 5,
                            "count" => 1
                    ]
                ]
            );

        $response->assertStatus(200);
        $response->assertJsonStructure([
            "error"]);
    }
}
